extends layout

block content
    .container-fluid.secondary-backgroundcolor.flex-grow-1.text-center
        .row(style="height:100%;")
            .col-sm-auto.align-items-center.g-3.vertical-center
                .row.ml-2 
                    table.table.table-bordered
                        thead
                            tr.primary-backgroundcolor
                                th.secondary-color() Stichtag
                        tbody
                            tr.table-light
                                td 
                                    .form-check
                                        input.form-check-input(type='radio', name='winterung', id='filterWinterung' , checked)
                                        label.form-check-label(for='winterung2') Winterung
                            tr.table-light
                                td 
                                    .form-check
                                        input.form-check-input(type='radio', name='winterung' , id='filterFSommerung', unchecked)
                                        label.form-check-label(for='winterung2') Frühe Sommerung
                            tr.table-light
                                td 
                                    .form-check
                                        input.form-check-input(type='radio', name='winterung', id='filterSSommerung', unchecked)
                                        label.form-check-label(for='winterung2') Späte Sommerung

                .row.ml-2 
                    table.table.table-bordered
                        thead
                            tr.primary-backgroundcolor
                                th.secondary-color(colspan="2", scope="col") Filter
                        tbody
                            tr.table-light
                                td  <sup>N</sup><sub>min</sub>
                                td
                                    input(type='checkbox', name='filterNmin', value='1', checked) 
                            tr.table-light
                                td  <sup>S</sup><sub>min</sub>
                                td
                                    input(type='checkbox', name='filterSmin', value='2', checked disabled) 
                            tr.table-light
                                td Humus
                                td
                                    input(type='checkbox', name='filterHumus', value='3', checked disabled) 
                            tr.table-light
                                td C/N
                                td       
                                    input(type='checkbox', name='filterCN', value='4', checked disabled)
            .col.flex.align-items-center
                .container-fluid.vertical-center
                    div#map(style='width: 100%; height: 95%;')


    #exampleModalCenter.modal.fade(tabindex='-1' role='dialog' aria-labelledby='exampleModalCenterTitle' aria-hidden='true')
        .modal-dialog.modal-dialog-centered(role='document')
            .modal-content.neutral-backgroundcolor
                .modal-header
                    h5#exampleModalLongTitle.modal-title.text-white Flächeninformationen
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') &times;
                // Modal-Body
                .modal-body
                    table.table.table-borderless.table-fleachenInformationene
                        tbody
                            tr.font-weight-bold
                                td
                                    | Kundennummer: 
                                td
                                    a.nav-linkTableA#kundenNr(style='color:#58634C; cursor: pointer;', onClick="kundenAnsehen(document.getElementById('kundenNr').textContent)")
                            tr.font-weight-bold
                                td
                                    | Probennummer: 
                                td
                                    span#probenNr
                            tr.font-weight-bold
                                td
                                    | Beproben ab: 
                                td
                                    span#beprobenAb
                            tr.font-weight-bold
                                td
                                    | Nutzung: 
                                td
                                    span#nutzung
                            tr.font-weight-bold
                                td
                                    | Schlag Bezeichnung: 
                                td
                                    span#schlagBz
                            tr.font-weight-bold 
                                td
                                    | Probenart 
                                td 
                                    table 
                                        tr
                                            td 
                                                span#nminGzogen

                                            td 
                                                span#sminGzogen

                                            td 
                                                span#humusGzogen

                                            td 
                                                span#cnGzogen
                            tr.font-weight-bold 
                                td
                                    | Flächengröße 
                                td
                                    table 
                                        tr
                                            td 
                                                span#fleachenGroesse

                                            td  h 
                                    

                .modal-footer
                    button.btn.btn-primary(type='button', style='margin-top: 5px', id='kmlbutton', onClick="kmlerstellen()", class='btn btn-primary button float-right bestellbutton') KML erstellen


    #ModalCenter.modal.fade(tabindex='-1' role='dialog' aria-labelledby='exampleModalCenterTitle' aria-hidden='true')
        .modal-dialog.modal-dialog-centered(role='document')
            .modal-content.neutral-backgroundcolor
                .modal-header
                    h5#exampleModalLongTitle.modal-title.text-white Flächeninformationen
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') &times;
                // Modal-Body
                .modal-body
                    button.btn.btn-primary(type='button', style='margin-top: 5px', id='kmlbutton', onClick="kmlerstellenMehrere()", class='btn btn-primary button float-right bestellbutton') KML erstellen
                    button.btn.btn-primary(type='button' data-toggle='modal' data-target='#ModalProbeBearbeitet' id='updatebutton', class='btn btn-primary button float-right bestellbuttont' style='margin-top: 5px; margin-right: 15px') Proben gezogen


    #ModalProbeBearbeitet.modal.fade(tabindex='-1' role='dialog' aria-labelledby='exampleModalCenterTitle' aria-hidden='true')
        .modal-dialog.modal-dialog-centered(role='document')
            .modal-content.neutral-backgroundcolor
                .modal-header
                    h5#exampleModalLongTitle.modal-title.text-white Probe bearbeitet am:
                    button.close(type='button' data-dismiss='modal' aria-label='Close')
                        span(aria-hidden='true') &times;
                    // Modal-Body
                .modal-body 
                    .input-group.date(data-provide="datepicker")
                        input#datepicker(type="date" class="form-control")
                        .input-group-addon
                            span.glyphicon.glyphicon-th
                // Modal-Body
                .modal-body
                    button.btn.btn-primary(type='button', style='margin-top: 5px', id='kmlbutton', onClick="fleachwurdenBearbeitet(document.getElementById('datepicker').value"+","+dieUserID+")", class='btn btn-primary button float-right bestellbutton') Proben gezogen
        div#loadingIndicator(style='display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); color: white; text-align: center; line-height: 100vh;')
            div.spinner-border(text='loading')         

    script(src="/javascript/cart.js")
    script.

        const today = new Date();
        const todayFormatted = today.toISOString().split('T')[0];
        document.getElementById('datepicker').value = todayFormatted;

        map.eachLayer(function (layer) {
            // Überprüfe, ob der Layer ein Polygon ist
            if (layer instanceof L.Polygon) {
                // Füge einen Ereignishandler für Klicks auf das Polygon hinzu
                layer.on('click', function (e) {
                    // Öffne das Modal, wenn auf das Polygon geklickt wird
                    $('#exampleModalCenter').modal('show');
                });
            }
        });



        function fleachwurdenBearbeitet(dateValue,userID) {
            console.log('die userid : ' + userID)
            const selectedProducts = [];
            for (let index = 0; index < includedFlaechen.length; index++) {
                var EminValue = 'n';
                var MangatValue = 'n';
                var StickstoffValue = 'n';
                var CheckboxCnValue = 'n';

                if (includedFlaechen[index].nmin === 1) {
                 MangatValue = 'j';
                } 
        
                if (sminGzogen === 1) {
                EminValue = 'j';
                } 
        
                if (humusGzogen === 1) {
                StickstoffValue = 'j';
                }
        
                if (cnGzogen === 1) {
                CheckboxCnValue = 'j';
                }

        
        
                //TODO HIER EINTRAGEN WENN INPUT GEÄNDERT WIRD DATE MUSS AUCH!!!

                console.log('userid:'+ includedFlaechen[index].kundennummer)
            
                    const productInfo = {
                        kundennummer: includedFlaechen[index].kundennummer,
                        productId: includedFlaechen[index].flaechenID,
                        //flaechenname: flaechennameValue,
                        dateValue: dateValue,
                        NminValue: MangatValue,
                        SminValue: EminValue,
                        HumusValue: StickstoffValue,
                        CnValue: CheckboxCnValue
                    };

                    selectedProducts.push(productInfo)
            }


            document.getElementById('loadingIndicator').style.display = 'block';


            fetch('/products/ProbeWurdeGezogen', {
                method: 'PUT',
                credentials: 'include',
                headers: {
                'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productIDs: selectedProducts })
            })
            .then(response => response.status)
            .then(status => handleResponse(status))
            .catch(error => console.error('Error:', error));
        }


        function kundenAnsehen(kundenummer) {
            var link = document.getElementById('kundenNr');
            link.href = '/products/' + kundenummer;
            link.click();  // Diese Zeile wird den Link programmatisch anklicken
        }

        var coordinatesArray = !{JSON.stringify(Fleachen)};
        var map = L.map('map').setView([52.849226, 7.913939], 13);

        // OpenStreetMap Layer hinzufügen
        L.tileLayer('https://{s}.google.com/vt/lyrs=s,h&x={x}&y={y}&z={z}', {
            maxZoom: 20,
            subdomains:['mt0','mt1','mt2','mt3'],
            attribution: '© Google'
        }).addTo(map);


        if(coordinatesArray.length > 0){ 
            var minLat = Number.POSITIVE_INFINITY;
            var maxLat = Number.NEGATIVE_INFINITY;
            var minLng = Number.POSITIVE_INFINITY;
            var maxLng = Number.NEGATIVE_INFINITY;

            for (var i = 0; i < coordinatesArray.length; i++) {
                var latitude = parseFloat(coordinatesArray[i].FKOORDINATENIDLAT);
                var longitude = parseFloat(coordinatesArray[i].FKOORDINATENIDLNG);

                minLat = Math.min(minLat, latitude);
                maxLat = Math.max(maxLat, latitude);
                minLng = Math.min(minLng, longitude);
                maxLng = Math.max(maxLng, longitude);
            }

            var centerLat = (minLat + maxLat) / 2;
            var centerLng = (minLng + maxLng) / 2;

            var bounds = L.latLngBounds(L.latLng(minLat, minLng), L.latLng(maxLat, maxLng));
            map.fitBounds(bounds);
        }

        var flaechenID = 0;
        var coordinates = []; // Hier werden die Koordinaten für die aktuelle Fläche gesammelt

        function formatDate(dateString) {
            var date = new Date(dateString);
            var day = date.getDate();
            var month = date.getMonth() + 1; // Monate sind von 0 bis 11
            var year = date.getFullYear();

            return (day < 10 ? '0' : '') + day + '.' + (month < 10 ? '0' : '') + month + '.' + year;
        }

        var drawnItems = new L.FeatureGroup();
        map.addLayer(drawnItems);

        var drawControl = new L.Control.Draw({
            draw: {
                polygon: {
                    shapeOptions: {
                        color: 'red'
                    },
                    allowIntersection: false,
                    drawError: {
                        color: 'orange',
                        timeout: 1000
                    },
                    showArea: true
                },
                polyline: false,
                circle: false,
                marker: false,
                circlemarker: false
            },
            edit: {
                featureGroup: drawnItems,
                remove: true
            }
        });


        var includedFlaechen = [];

        map.addControl(drawControl);

                
        setUpdateMap();


        map.on('draw:created', function (e) {
            includedFlaechen = [];

            console.log(includedFlaechen + 'hier ')
            var layerEingezeichnet = e.layer;
            drawnItems.addLayer(layerEingezeichnet);
            console.log(layerEingezeichnet.getLatLngs()[0]);

            map.eachLayer(function (layer) {
                if (layer instanceof L.Polygon) {
                    if (isInnerPolygonInsideOuterPolygon(layer, layerEingezeichnet)) {                        
                        var fleachenErstellt = { flaechenID: layer.options.info.probenNr, kundennummer: layer.options.info.kundenNr, nmin: layer.options.info.nminGzogen, smin: layer.options.info.sminGzogen, humus: layer.options.info.humusGzogen, cn: layer.options.info.cnGzogen};
                        includedFlaechen.push(fleachenErstellt);
                    }  
                }
            });
            $('#ModalCenter').modal('show');
        });



        function isPointInsidePolygon(point, polygon) {
            var x = point.lng;
            var y = point.lat;

            var inside = false;
            for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
                var xi = polygon[i].lng, yi = polygon[i].lat;
                var xj = polygon[j].lng, yj = polygon[j].lat;

                var intersect = ((yi > y) !== (yj > y)) &&
                    (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
                if (intersect) inside = !inside;
            }
            return inside;
        }

        function kmlerstellen() {
            var produktid = document.getElementById('probenNr').textContent;

            
            fetch('/products/generateKmlFile', {
                method: 'PUT',
                credentials: 'include',
                headers: {
                'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productIDs: produktid })
            })

            .then(response => response.text())
            .then(url => {
                var blob = new Blob([url], { type: 'application/vnd.google-earth.kml+xml' });

                // Erstelle einen "a" HTML-Element mit einem "download"-Attribut
                var link = document.createElement("a");
                link.href = URL.createObjectURL(blob);
                link.download = "Fleache"+produktid+".kml";
            
                // Füge den Link zum DOM hinzu und simuliere einen Klick
                document.body.appendChild(link);
                link.click();
            
                // Entferne den Link aus dem DOM
                document.body.removeChild(link);
            })
            .catch(error => console.error('Error:', error));
        }

        function kmlerstellenMehrere() {
            var produktid = []

            for (const id of includedFlaechen) {
                produktid.push(id.flaechenID)
            }

            
            fetch('/products/generateKmlFile', {
                method: 'PUT',
                credentials: 'include',
                headers: {
                'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productIDs: produktid })
            })

            .then(response => response.text())
            .then(url => {
                var blob = new Blob([url], { type: 'application/vnd.google-earth.kml+xml' });

                // Erstelle einen "a" HTML-Element mit einem "download"-Attribut
                var link = document.createElement("a");
                link.href = URL.createObjectURL(blob);
                link.download = "FleacheMehrere.kml";
            
                // Füge den Link zum DOM hinzu und simuliere einen Klick
                document.body.appendChild(link);
                link.click();
            
                // Entferne den Link aus dem DOM
                document.body.removeChild(link);
            })
            .catch(error => console.error('Error:', error));
        }

        function handleResponse(status) {
            if (status === 200) {
                location.reload();
            } else if (status === 100) {
                location.reload()
                window.location.href = '/cart'; // Ändere die URL entsprechend deiner Seite 
            }  // Hier die Seite neu laden
             else if (status === 404) {
                console.error('ERROR')
            }
        }

